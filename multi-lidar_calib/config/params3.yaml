/**:
  ros__parameters:
    # 获取标定雷达的点云数量，数量大，鲁棒性更好
    # 当 > 1时，激光雷达和环境应该保持静止
    frame_count: 5

    # 标定次数
    runs_count: 1

    # when enabled,finds point clouds with most overlap automatically
    # this method is more general and might be more precise but is slower
    use_fitness_based_calibration: false

    visualize: true

    # 从文件获取标定数据
    read_pcds_from_file: false
    # 从table获取数据
    read_tf_from_table: true
    # 是否采用欧拉角
    table_degrees: true

    # 格式：.pcd  <lidar_name>/<pcd>/<filename1><filename2>...
    # 与 multi_lidar_calibrator.py 的相对路径
    # read_pcds_from_file: true时，transformations 必须定义
    pcd_directory: /data/pcds/

    # 从topic获取标定数据
    lidar_topics: [/main, /via]
    # 不同lidar的TFMessage，[translation,rotation] [xyz,rpy] [m, deg/rad]
    main: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
    via: [0.0, 0.000, 0.0, 0.0, 0.0, 0.0]

    # 目标激光雷达frame_id
    target_frame_id: main
    # 标定激光雷达frame_id
    base_frame_id: via

    # 从topic获取TFMessage
    tf_topic: /tf_static

    base_to_ground_z: 0.338 # assumes base is directly above the origin

    # when not empty, write resultig transformations into an urdf file
    # assumes that joints in the file have nane in for of <lidar_name>_joint
    # urdf_path: "/home/andrii/TUM/thesis/SensorCalibration/ros2_ws/src/edgar/edgar_state_publisher/urdf/edgar.description.states.urdf"

    # when true, calibrate target LiDAR (z, and pitch) to the base frame.
    calibrate_target: false

    # when true, calibrate all LiDARs to the base frame isntead of to other LiDARs
    calibrate_to_base: false

    # 标定结果保存路径 (相对于 multi_lidar_calibrator.py)
    default_output_dir: /output/

    # parameters for the GICP algorithm
    # Maximum correspondence points-pair distance.
    max_corresp_dist: 1.0
    
    # ICP algorithm stops if the relative change of fitness and rmse hit relative_fitness
    # and relative_rmse individually, or the iteration number exceeds max_iteration
    rel_fitness: 0.0000001
    rel_rmse: 0.0000001
    max_iterations: 100
    # just a constant. Changing it too much will probably lead to poor results.
    epsilon: 0.005
    # makes GICP faster by reducing number of points but might reduce accuracy
    # voxel size [m] in which the cloud is downampled. Highly recommended when using RANSAC
    # activated if > 0.0
    voxel_size: 0.05
    # makes GICP faster by removing ground from a cloud but might reduce accuracy
    remove_ground_flag: false
    # calibrations with fitness score <= threshold are considered unsuccessful (not enough overlap)
    fitness_score_threshold: 0.2

    # parameters for RANSAC. RANSAC is used to calibrate target LiDAR to the ground plane
    # or to speed up GICP by removing ground plane from the point cloud.
    # max distance for the point inlier to plane
    distance_threshold: 0.1
    # number of points used to define a plane
    ransac_n: 10
    # number of iterations of RANSAC. Larger number => larger probability to find a better plane
    num_iterations: 2000
    # voxel size for RANSAC for pitch calibration
    r_voxel_size: 0.1
    # number of reruns of RANSAC for better robustness
    r_runs: 10
